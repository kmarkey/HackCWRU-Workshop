subtitle = "KG")
kgzones %>%
dplyr::filter(sex == "m") %>%
ggplot() + geom_point(aes(x = stature_cm, y = lat, color = main_climate)) +
facet_wrap(~ main_climate) + coord_flip() +
labs(title = "Male Stature and Lattitude for Each Main Climate Zone",
subtitle = "KG")
library(tidyverse)
version
vector <- c("a", "b", "c")
vector2 <- c(1, 2, 3)
list <- c(1 = "a", 2 = "b", 3 = "c")
list <- c(a = "a", b = "b", c = "c")
list
list <- c("crowd" = "a", b = "b", c = "c")
list
list["crowd"]
list["crowd",]
vector <- c("a", "b", "c")
vector2 <- c(1, 2, 3)
list <- c("crowd" = "a", b = "b", c = "c")
list["crowd"]
factor1 <- c("a", "b", "c")
factor1 <- factor("a", "b", "c")
factor1
factor1 <- factor(c"a", "b", "c")
factor1 <- factor(c("a", "b", "c"))
factor1
factor1 <- factor(c("a", "b", "c", "b", "b"))
factor1
vector <- c("a", "b", "c")
vector1 <- c("a", "b", "c")
vector2 <- c(1, 2, 3)
list1 <- c("crowd" = "a", b = "b", c = "c")
factor1 <- factor(c("a", "b", "c", "b", "b"))
vector1
vector2 <- c(1, 2, 3)
vector2
# martix
matrix1 <- matrix(vector1, vector2)
View(matrix1)
# numeric vector
vector2 <- c(1, 2, 3)
# martix
matrix1 <- matrix(vector1, vector2)
# martix
matrix1 <- matrix(vector1, vector2, nrow = 2)
# martix
matrix1 <- matrix(data = c(vector1, vector2))
# martix
matrix1 <- matrix(data = c(vector1, vector2), nrow = 2)
View(matrix1)
# martix
matrix1 <- matrix(data = c(vector1, vector2), ncol = 2)
class(matrix1)
# martix
matrix1 <- matrix(data = c(vector1, vector2), ncol = 2)
matrix1
class(matrix1)
matrix(matrix1)
class(matrix(matrix1))
# factor
factor1 <- factor(c("a", "b", "c", "b", "b"))
factor1
list(factor1)
# martix
matrix1 <- matrix(data = c(vector1, vector2), ncol = 2)
matrix1
class(matrix1)
# data frame = table
dataframe1 <-
# data frame = table
dataframe1 <- data.frame(c(matrix1, 78, 44))
# data frame = table
dataframe1 <- data.frame(c(matrix1, 78, 44), ncol = 2)
View(dataframe1)
# data frame = table
dataframe1 <- data.frame(c(matrix1, 78, 44))
dataframe1
class(dataframe1)
# tidyverse
data(mtcars)
# tidyverse
data("mtcars")
data <- mtcars
glimpse(mtcars)
dplyr:: filter(data, carb == 4)
data <- mtcars
glimpse(mtcars)
dplyr:: filter(data, carb == 4)
data[carb == 4,]
data[,data$carb == 4]
data[data$carb == 4,]
dplyr::filter(data, carb == 4)
data[data$carb == 4,]
# select
data[c("disp", "wt")]
# select
data[c("disp", "wt"),]
# select
data[,c("disp", "wt")]
dplyr::select(data, disp, wt)
class(mtcars)
data <- mtcars
glimpse(mtcars)
class(mtcars)
dplyr::filter(data, carb == 4)
# mutate
data["plums"] <- data$mpg - data$cyl
dplyr::mutate(data, plums = mpg - cyl)
# mutate
data["plums"] <- data$mpg - data$cyl
dplyr::mutate(data, plums = mpg - cyl)
library(tidyverse)
glimpse(mtcars)
# filter
# I just want to see rows with this value
mtcars[mtcars$carb <= 4,]
# filter
# I just want to see rows with this value
mtcars[mtcars$mpg <= 4,]
# filter
# I just want to see rows with this value
mtcars[mtcars$mpg <= 10,]
# filter
# I just want to see rows with this value
mtcars[mtcars$mpg <= 15,]
dplyr::filter(mtcars, mpg <= 15)
# filter
# I just want to see rows with this value
mtcars$mpg
# filter
# I just want to see rows with this value
mtcars$mpg <= 15
# select
# I only want columns with this name
mtcars[,c("disp", "wt")]
dplyr::select(mtcars, disp, wt)
# mutate
# I want to change a variable
mtcars[plums] <- mtcars$mpg - mtcars$cyl
# mutate
# I want to change a variable
mtcars["plums"] <- mtcars$mpg - mtcars$cyl
print(mtcars$plums)
dplyr::mutate(mtcars, plums = mpg - cyl)
View(mtcars)
# mutate
# I want to change a variable
mtcars["plums"] <- mtcars$disp / mtcars$cyl
print(mtcars$plums)
dplyr::mutate(mtcars, plums = disp - cyl)
# Row-dependent mutate
mtcars["pears"] <- ifelse(mtcars$cyl == 8, mtcars$disp / mtcars$cyl, 0)
print(mtcars)
print(mtcars$plums, mtcars$plums)
print(mtcars$plums, mtcars$pears)
print(mtcars[c("pears", "plums"),]
print(mtcars[c("pears", "plums"),])
print(mtcars[c("pears", "plums"),])
print(mtcars[,c("pears", "plums")])
dplyr::mutate(mtcars, ifelse(cyl == 8, disp / cyl, 0))
dplyr::mutate(mtcars, ipears = felse(cyl == 8, disp / cyl, 0))
dplyr::mutate(mtcars, pears = ifelse(cyl == 8, disp / cyl, 0))
plot(mtcars$hp, mtcars$mpg)
plot(mtcars$hp, mtcars$mpg)
ggplot(mtcars) + geom_point(aes(x = hp, y = mpg))
# base R
## 1-dimensional objects
# character vector = array
vector1 <- c("a", "b", "c")
vector1
class(vector1)
vector1[1]
vector1[2,3] # Doesn't work
vector1[c(2,3)]
# numeric vector = array
vector2 <- c(1, 2, 3)
vector2
class(vector2)
# list
list1 <- c("crowd" = "a", b = c(12), c = "seven")
list1
class(list1)
list1[2]
list1[2] + 3 # Doesn't work
as.numeric(list1[2]) + 3
# factor
factor1 <- factor(c("a", "b", "c", "b", "b"))
factor1
list(factor1)
factor1[3]
factor1["a"] # Doesn't work
levels(factor1)
# martix
matrix1 <- matrix(data = c(vector1, vector2), ncol = 2)
matrix1
class(matrix1)
matrix1[3,1]
matrix1[6]
matrix1[1,]
# data frame = table
dataframe1 <- data.frame(col1 = c(matrix1, 78, 44), col2 = 1:8)
dataframe1
class(dataframe1)
dataframe1$col1
dataframe1[3,]
dataframe1$col1
dataframe1[3,]
# Data Cleaning
plot(mtcars$hp, mtcars$mpg)
ggplot(mtcars) + geom_point(aes(x = hp, y = mpg))
barplot(mtcars$cyl)
hist(mtcars$cyl)
ggplot(mtcars) + geom_histogram(aes(x = cyl))
library(keras)
install.packages("keras")
library(keras)
# initialize model object, pipes are sick
model <- keras_model_sequential()
knitr::opts_chunk$set(
cache = FALSE, # if TRUE knitr will cache results to reuse in future knits
fig.width = 6, # the width for plots created by code chunk
fig.height = 4.5, # the height for plots created by code chunk
fig.align = 'center', # how to align graphics. 'left', 'right', 'center'
dpi = 150,
# results = 'asis', # knitr passes through results without reformatting
echo = TRUE, # if FALSE knitr won't display code in chunk above it's results
message = TRUE, # if FALSE knitr won't display messages generated by code
strip.white = TRUE, # if FALSE knitr won't remove white spaces at beg or end of code chunk
warning = FALSE) # if FALSE knitr won't display warning messages in the doc
# initialize model object, pipes are sick
entry <- layer_input(shape = c(30))
install_tensorflow()
install_keras()
knitr::opts_chunk$set(
cache = FALSE, # if TRUE knitr will cache results to reuse in future knits
fig.width = 6, # the width for plots created by code chunk
fig.height = 4.5, # the height for plots created by code chunk
fig.align = 'center', # how to align graphics. 'left', 'right', 'center'
dpi = 150,
# results = 'asis', # knitr passes through results without reformatting
echo = TRUE, # if FALSE knitr won't display code in chunk above it's results
message = TRUE, # if FALSE knitr won't display messages generated by code
strip.white = TRUE, # if FALSE knitr won't remove white spaces at beg or end of code chunk
warning = FALSE) # if FALSE knitr won't display warning messages in the doc
library(tensorflow)
library(keras)
library(reticulate)
use_virtualenv("r-tensorflow")
install.packages("installr")
library(installr)
updateR()
updateR()
library(tidyverse)
library(tidyverse)
rlang
package_version(rlang)
package_version("rlang")
.libPaths()
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
library(keras)
# initialize model object
model <- keras_model_sequential()
tensorflow::install_tensorflow()
k_clear_session()
library(tidyverse)
library(caret)
data(Sonar)
library(tidyverse)
# base R
## 1-dimensional objects
# character vector = array
vector1 <- c("a", "b", "c")
vector1
class(vector1)
vector1[1]
vector1[2,3] # Doesn't work
vector1[c(2,3)]
# numeric vector = array
vector2 <- c(1, 2, 3)
vector2
class(vector2)
# list
list1 <- c("crowd" = "a", b = c(12), c = "seven")
list1
class(list1)
list1[2] + 3 # Doesn't work
as.numeric(list1[2]) + 3
# factor
factor1 <- factor(c("a", "b", "c", "b", "b"))
factor1
list(factor1)
factor1[3]
factor1["a"] # Doesn't work
levels(factor1)
# martix
matrix1 <- matrix(data = c(vector1, vector2), ncol = 2)
matrix1
class(matrix1)
matrix1[3,1]
matrix1[6]
matrix1[1,]
# data frame = table
dataframe1 <- data.frame(col1 = c(matrix1, 78, 44), col2 = 1:8)
dataframe1
class(dataframe1)
dataframe1$col1
dataframe1[3,]
dataframe1$col1
dataframe1[3,]
# Data Cleaning
We've got basic structures under our belt, lets get to the cool stuff.
You can clean  + manipulate data in R very easily, and in my opinion, quite intuitively too. I like using the tidyverse, but here I show both base R and tidyverse methods.
```{r tidyr}
# tidyverse
data("mtcars")
class(mtcars)
# standard head() function
head(mtcars)
# tidyverse
data("mtcars")
dataframe1
class(dataframe1)
dataframe1$col1
dataframe1[3,]
dataframe1$col1
dataframe1[3,]
# Data Cleaning
We've got basic structures under our belt, lets get to the cool stuff.
You can clean  + manipulate data in R very easily, and in my opinion, quite intuitively too. I like using the tidyverse, but here I show both base R and tidyverse methods.
```{r tidyr}
# tidyverse
data("mtcars")
class(mtcars)
# standard head() function
head(mtcars)
glimpse(mtcars)
View(mtcars)
setwd("~/LocalRStudio/Workshop3-19")
fitbit <- read_csv("data/Daily_Activity_2022_27_02.csv")
View(fitbit)
# using mtcars
# make testing and training set
x <- mtcars[,1:20]
# using mtcars
# make testing and training set
x <- mtcars[,20]
# using mtcars
# make testing and training set
x <- mtcars[,1;20]
# using mtcars
# make testing and training set
x <- mtcars[,1:20]
# using mtcars
# make X AND Y
x <- dplyr::select(mtcars, am)
y <- dplyr::select(mtcars, -am)
y <- dplyr::select(mtcars, !am)
y <- dplyr::select(mtcars, -am)
#10 folds repeat 3 times
control <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry = mtry)
rf_default <- train(am ~.,
data = mtcars,
method='rf',
metric='Accuracy',
tuneGrid=tunegrid,
trControl=control)
# using mtcars
# make X AND Y
x <- dplyr::select(mtcars, factor(am))
# using mtcars
# make X AND Y
x <- factor(mtcars[,"am"])
# using mtcars
# some cleaning
mtcars <- dplyr::mutate(mtcars, am = factor(am))
#10 folds repeat 3 times
control <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid()
#Number randomely variable selected
tunegrid <- expand.grid()
rf_default <- train(am ~. ,
data = mtcars,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
rf_default <- train(am ~. ,
data = mtcars,
method = 'rf',
metric = 'Accuracy',
mtry = 3
tuneGrid = tunegrid,
rf_default <- train(am ~. ,
data = mtcars,
method = 'rf',
metric = 'Accuracy',
mtry = 3,
tuneGrid = tunegrid,
trControl = control)
rf_default <- train(am ~. ,
data = mtcars,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
#Number randomely variable selected
tunegrid <- expand.grid(.mtry = 3)
rf_default <- train(am ~. ,
data = mtcars,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
print(rf_default)
#Number randomely variable selected
tunegrid <- expand.grid(.mtry = c(3, 4, 5))
rf_default <- train(am ~. ,
data = mtcars,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
print(rf_default)
mod1 <- lm(am ~., data = mtcars)
mod1 <- glm(am ~., data = mtcars, family = "binomial")
mod1 <- glm(am ~., data = mtcars)
# tidyverse
data("mtcars")
class(mtcars)
mod1 <- glm(am ~., data = mtcars)
# using mtcars
# some cleaning
data <- dplyr::mutate(mtcars, am = factor(am))
#10 folds repeat 3 times
control <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected
tunegrid <- expand.grid(.mtry = c(3, 4, 5))
rf_default <- train(am ~. ,
data = data,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
rf_default <- train(am ~. ,
data = data,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
print(rf_default)
#Number randomely variable selected
tunegrid <- expand.grid(.mtry = c(1, 5, 8))
rf_default <- train(am ~. ,
data = data,
method = 'rf',
metric = 'Accuracy',
tuneGrid = tunegrid,
trControl = control)
print(rf_default)
summary(mod1)
library(randomForest)
brooklyn <- read_csv("data/brooklyn.csv")
View(brooklyn)
fitbit <- read_csv("data/Daily_Activity_2022_27_02.csv") %>%
dplyr::mutate(dvcal = ifelse(Calories >= 2000, 1, 0))
mod1 <- glm(dvcal ~., data = fitbit)
mod1 <- glm(dvcal ~., data = fitbit, family = "binomial")
fitbit <- read_csv("data/Daily_Activity_2022_27_02.csv") %>%
dplyr::mutate(dvcal = ifelse(Calories >= 2000, 1, 0))
mod1 <- glm(dvcal ~., data = fitbit, family = "binomial")
summary(mod1)
fitbit <- read_csv("data/Daily_Activity_2022_27_02.csv") %>%
dplyr::mutate(dvcal = as.character(ifelse(Calories >= 2000, 1, 0)))
mod1 <- glm(dvcal ~., data = fitbit, family = "binomial")
fitbit <- read_csv("data/Daily_Activity_2022_27_02.csv") %>%
dplyr::mutate(dvcal = factor(ifelse(Calories >= 2000, 1, 0)))
mod1 <- glm(dvcal ~., data = fitbit, family = "binomial")
hist(fitbit$dvcal)
fitbit <- read_csv("data/Daily_Activity_2022_27_02.csv") %>%
dplyr::mutate(dvcal = ifelse(Calories >= 2000, 1, 0))
hist(fitbit$dvcal)
fitbit <- fitbit %>%
dplyr::mutate(dvcal = ifelse(Calories >= 2000, 1, 0))
hist(fitbit$dvcal)
mod1 <- glm(dvcal ~., data = fitbit, family = "binomial")
mod1 <- glm(dvcal ~., data = fitbit)
mod1 <- lm(dvcal ~., data = fitbit)
